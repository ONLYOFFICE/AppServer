version: "3.5"
x-service: 
    &x-service-base
    container_name: base
    restart: always
    expose:
    - ${SERVICE_PORT:-5050}
    environment:
      MYSQL_HOST: ${MYSQL_HOST:-mysql}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      APP_DOTNET_ENV: ${APP_DOTNET_ENV:-products}
      APP_CORE_BASE_DOMAIN: ${APP_CORE_BASE_DOMAIN:-localhost}
      APP_CORE_MACHINEKEY: ${APP_CORE_MACHINEKEY:-""}
      DOCUMENT_SERVER_JWT_SECRET: ${DOCUMENT_SERVER_JWT_SECRET:-""}
      DOCUMENT_SERVER_JWT_HEADER: ${DOCUMENT_SERVER_JWT_HEADER:-""}
      DOCUMENT_SERVER_URL_PUBLIC: ${DOCUMENT_SERVER_URL_PUBLIC:-/ds-vpath/}
      DOCUMENT_SERVER_URL_INTERNAL: ${DOCUMENT_SERVER_URL_INTERNAL:-http://onlyoffice-document-server/}
      DOCUMENT_SERVER_URL_CONVERTER: ${DOCUMENT_SERVER_URL_CONVERTER:-/ds-vpath/ConvertService.ashx}
      KAFKA_HOST: ${KAFKA_HOST:-kafka}
      ELK_HOST: ${ELK_HOST:-elasticsearch}
      PROXY_HOST: ${PROXY_HOST:-proxy}
    volumes:
    - /app/onlyoffice/CommunityServer/data:/app/onlyoffice/data/

services: 
  onlyoffice-elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION}
    container_name: ${ELK_HOST:-elasticsearch}
    restart: always
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65535
        hard: 65535
    volumes:
      - es_data:/usr/share/elasticsearch/data
    expose:
      - "9200"
      - "9300"

  onlyoffice-zookeeper:
    image: zookeeper:latest
    container_name: ${ZOO_HOST:-zookeeper}
    restart: always
    expose:
      - "2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: ${ZOO_PORT:-2181}
      ZOO_SERVER: ${ZOO_SERVER}
    volumes:
    - zoo_data:/data
    - zoo_log:/datalog

  onlyoffice-kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ${KAFKA_HOST:-kafka}
    restart: always
    expose:
      - "9092"
    depends_on:
    - onlyoffice-zookeeper
    environment:
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_INTER_BROKER_LISTENER_NAME: ${KAFKA_INTER_BROKER_LISTENER_NAME}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_LOG4J_LOGGERS: ${KAFKA_LOG4J_LOGGERS}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
    volumes:
    - kafka_data:/var/lib/kafka/data

  onlyoffice-api:
    <<: *x-service-base
    image: "${REPO:-onlyoffice}/${STATUS:-}appserver-api:${TAG_SRV:-latest}"
    container_name: ${API_HOST:-api}

  onlyoffice-api_system:
    <<: *x-service-base
    image: "${REPO:-onlyoffice}/${STATUS:-}appserver-api_system:${TAG_SRV:-latest}"
    container_name: ${API_SYSTEM_HOST:-api_system}
     
  onlyoffice-urlshortener:
    <<: *x-service-base
    image: "${REPO:-onlyoffice}/${STATUS:-}appserver-urlshortener:${TAG_SRV:-latest}"
    container_name: ${URLSHORTENER_HOST:-urlshortener}
   
  onlyoffice-studio.notify:
    <<: *x-service-base
    image: "${REPO:-onlyoffice}/${STATUS:-}appserver-studio.notify:${TAG_SRV:-latest}"
    container_name: ${STUDIO_NOYIFY_HOST:-studio.notify}
    
  onlyoffice-notify:
    <<: *x-service-base
    image: "${REPO:-onlyoffice}/${STATUS:-}appserver-notify:${TAG_SRV:-latest}"
    container_name: ${NOTIFY_HOST:-notify}

  onlyoffice-people.server:
    <<: *x-service-base
    image: "${REPO:-onlyoffice}/${STATUS:-}appserver-people.server:${TAG_SRV:-latest}"
    container_name: ${PEOPLE_SERVER:-people.server}
    
  onlyoffice-files:
    <<: *x-service-base
    image: "${REPO:-onlyoffice}/${STATUS:-}appserver-files:${TAG_SRV:-latest}"
    container_name: ${FILES_HOST:-files}
    
  onlyoffice-files_services:
    <<: *x-service-base
    image: "${REPO:-onlyoffice}/${STATUS:-}appserver-files_services:${TAG_SRV:-latest}"
    container_name: ${FILES_SERVICES_HOST:-files_services}
    
  onlyoffice-studio:
    <<: *x-service-base
    image: "${REPO:-onlyoffice}/${STATUS:-}appserver-studio:${TAG_SRV:-latest}"
    container_name: ${STUDIO_HOST:-studio}
   
  onlyoffice-backup:
    <<: *x-service-base
    image: "${REPO:-onlyoffice}/${STATUS:-}appserver-backup:${TAG_SRV:-latest}"
    container_name: ${BACKUP_HOST:-backup}
    
  onlyoffice-nginx:
    image: "${REPO:-onlyoffice}/${STATUS:-}appserver-proxy:${TAG_SRV:-latest}"
    container_name: ${PROXY_HOST:-proxy}
    restart: always
    expose:
      - "8081"
      - "8099"
    ports:
      - 8092:8092 
    depends_on:
      - onlyoffice-api
      - onlyoffice-api_system
      - onlyoffice-urlshortener
      - onlyoffice-studio.notify
      - onlyoffice-notify
      - onlyoffice-people.server
      - onlyoffice-files
      - onlyoffice-files_services
      - onlyoffice-studio
      - onlyoffice-backup
    environment:
      - SERVICE_API="${API_HOST:-api}:${SERVICE_PORT:-5050}"
      - SERVICE_API_SYSTEM="${API_SYSTEM_HOST:-api_system}:${SERVICE_PORT:-5050}"
      - SERVICE_URLSHORYENER="${URLSHORTENER_HOST:-urlshortener}:${SERVICE_PORT:-5050}"
      - SERVICE_STUDIO_NOTIFY="${STUDIO_NOYIFY_HOST:-studio.notify}:${SERVICE_PORT:-5050}"
      - SERVICE_PEOPLE_SERVER="${PEOPLE_SERVER_HOST:-people.server}:${SERVICE_PORT:-5050}"
      - SERVICE_FILES="${FILES_HOST:-files}:${SERVICE_PORT:-5050}"
      - SERVICE_FILES_SERVICES="${FILES_SERVICES_HOST:-files_services}:${SERVICE_PORT:-5050}"
      - SERVICE_STUDIO="${STUDIO_HOST:-studio}:${SERVICE_PORT:-5050}"
      - SERVICE_BACKUP="${BACKUP_HOST:-backup}:${SERVICE_PORT:-5050}"
      - DOCUMENT_SERVER="${DOCUMENT_SERVER_HOST:-document-server}"
      - SERVICE_PORT=${SERVICE_PORT:-5050}
    volumes:
      - nginx_log:/var/log/nginx

networks:
  default:
    external:
      name: ${NETWORK_NAME:-onlyoffice}

volumes:
  kafka_data:
  zoo_data:
  zoo_log:
  nginx_log:
  app_data:
  es_data:

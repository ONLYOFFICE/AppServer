// <auto-generated />
using System;
using ASC.Core.Common.EF.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ASC.Core.Common.Migrations.Npgsql.MessagesContextNpgsql
{
    [DbContext(typeof(PostgreSqlMessagesContext))]
    partial class MessagesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ASC.Core.Common.EF.Model.AuditEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Action")
                        .HasColumnName("action")
                        .HasColumnType("integer");

                    b.Property<string>("Browser")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("browser")
                        .HasColumnType("character varying(200)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(200);

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("description")
                        .HasColumnType("character varying(20000)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(20000);

                    b.Property<string>("Initiator")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("initiator")
                        .HasColumnType("character varying(200)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(200);

                    b.Property<string>("Ip")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ip")
                        .HasColumnType("character varying(50)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(50);

                    b.Property<string>("Page")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("page")
                        .HasColumnType("character varying(300)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(300);

                    b.Property<string>("Platform")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("platform")
                        .HasColumnType("character varying(200)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(200);

                    b.Property<string>("Target")
                        .HasColumnName("target")
                        .HasColumnType("text");

                    b.Property<int>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("NULL")
                        .IsFixedLength(true)
                        .HasMaxLength(38);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Date")
                        .HasName("date");

                    b.ToTable("audit_events","onlyoffice");
                });


            modelBuilder.Entity("ASC.Core.Common.EF.Model.DbTenantPartner", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("integer");

                    b.Property<string>("AffiliateId")
                        .HasColumnName("affiliate_id")
                        .HasColumnType("text");

                    b.Property<string>("Campaign")
                        .HasColumnName("campaign")
                        .HasColumnType("text");

                    b.Property<string>("PartnerId")
                        .HasColumnName("partner_id")
                        .HasColumnType("text");

                    b.HasKey("TenantId");

                    b.ToTable("tenants_partners");
                });

           

            modelBuilder.Entity("ASC.Core.Common.EF.Model.LoginEvents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Action")
                        .HasColumnName("action")
                        .HasColumnType("integer");

                    b.Property<string>("Browser")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("browser")
                        .HasColumnType("character varying(200)")
                        .HasDefaultValueSql("NULL::character varying")
                        .HasMaxLength(200);

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("description")
                        .HasColumnType("character varying(500)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(500);

                    b.Property<string>("Ip")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ip")
                        .HasColumnType("character varying(50)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(50);

                    b.Property<string>("Login")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("login")
                        .HasColumnType("character varying(200)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(200);

                    b.Property<string>("Page")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("page")
                        .HasColumnType("character varying(300)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(300);

                    b.Property<string>("Platform")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("platform")
                        .HasColumnType("character varying(200)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(200);

                    b.Property<int>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid")
                        .IsFixedLength(true)
                        .HasMaxLength(38);

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .HasName("date_login_events");

                    b.HasIndex("UserId", "TenantId")
                        .HasName("tenant_id_login_events");

                    b.ToTable("login_events","onlyoffice");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.DbTenantPartner", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithOne("Partner")
                        .HasForeignKey("ASC.Core.Common.EF.Model.DbTenantPartner", "TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using ASC.Core.Common.EF.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ASC.Core.Common.Migrations.Npgsql.DbContextNpgsql
{
    [DbContext(typeof(EF.Context.PostgreSqlDbContext))]
    [Migration("20200929101139_DbContextNpgsql")]
    partial class DbContextNpgsql
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:Enum:onlyoffice.enum_dbip_location", "ipv4,ipv6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ASC.Core.Common.EF.Model.DbipLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AddrType")
                        .HasColumnName("addr_type")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("city")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnName("country")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("District")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("district")
                        .HasColumnType("character varying(255)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(255);

                    b.Property<int>("GeonameId")
                        .HasColumnName("geoname_id")
                        .HasColumnType("integer");

                    b.Property<string>("IPEnd")
                        .IsRequired()
                        .HasColumnName("ip_end")
                        .HasColumnType("character varying(39)")
                        .HasMaxLength(39);

                    b.Property<string>("IPStart")
                        .IsRequired()
                        .HasColumnName("ip_start")
                        .HasColumnType("character varying(39)")
                        .HasMaxLength(39);

                    b.Property<long>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("bigint");

                    b.Property<long>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("bigint");

                    b.Property<int>("Processed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("processed")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<string>("StateProv")
                        .IsRequired()
                        .HasColumnName("stateprov")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TimezoneName")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("timezone_name")
                        .HasColumnType("character varying(255)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(255);

                    b.Property<double>("TimezoneOffset")
                        .HasColumnName("timezone_offset")
                        .HasColumnType("double precision");

                    b.Property<string>("ZipCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("zipcode")
                        .HasColumnType("character varying(255)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("IPStart")
                        .HasName("ip_start");

                    b.ToTable("dbip_location","onlyoffice");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.MobileAppInstall", b =>
                {
                    b.Property<string>("UserEmail")
                        .HasColumnName("user_email")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("AppType")
                        .HasColumnName("app_type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastSign")
                        .HasColumnName("last_sign")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("RegisteredOn")
                        .HasColumnName("registered_on")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("UserEmail", "AppType")
                        .HasName("mobile_app_install_pkey");

                    b.ToTable("mobile_app_install","onlyoffice");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.Regions", b =>
                {
                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<string>("ConnectionString")
                        .HasColumnName("connection_string")
                        .HasColumnType("text");

                    b.Property<string>("Provider")
                        .HasColumnType("text");

                    b.HasKey("Region");

                    b.ToTable("regions");
                });
#pragma warning restore 612, 618
        }
    }
}
